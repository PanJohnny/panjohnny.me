---
import Layout from "../../layouts/Layout.astro";
---

<Layout
    title="MHD Hra"
    description="Hra, při které jezdíte po Praze na náhodně vylosované zastávky MHD. Hraje s v týmech a tým, který všechny vylosované objede rychleji (bez použití vyhledávačů spojů) vyhrává."
    metaDesc="Hra, při které jezdíte po Praze na náhodně vylosované zastávky MHD. Hraje s v týmech a tým, který všechny vylosované objede rychleji (bez použití vyhledávačů spojů) vyhrává."
    metaTags={["MHD Hra", "Praha", "MHD", "Hra", "PID", "PID Hra"]}
>
    <main>
        <input type="submit" id="gen" onclick="gen()" value="Let's rock"></input>

        <div id="status"></div>

        <h3>Stops:</h3>
        <ol id="places"></ol>
        <a role="button" href="javascript:shareIt()" class="share" style="">Sdílet</a>

        <div id="map"></div>

        <div id="disclaimer" class="dark">
            Loading speed may depend on your internet connection and device. Map
            may be really slow.
        </div>
    </main>
</Layout>
<link
    rel="stylesheet"
    href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
    integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
    crossorigin=""
/>
<script
    src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
    integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
    crossorigin=""
    is:inline></script>
<script is:inline>
    /*
                Typy: bus, tram, ferry, metro, train, trolleybus, funicular
            */
    const icons = {
        bus: "fa-bus",
        tram: "fa-train-tram",
        metro: "fa-train-subway",
        train: "fa-train",
        ferry: "fa-ferry",
        funicular: "fa-mountain",
        trolleybus: "fa-bus-simple",
        default: "fa-sign-hanging",
    };

    const openData = "/demo/resources/stops";

    const status = document.getElementById("status");
    const places = document.getElementById("places");

    window.onerror = (msg, url, line, col, err) => {
        status.innerHTML = msg;
    };

    var data = null;
    var loaded = false;
    var op = 0;

    switch (window.location.hash) {
        case "#P":
            op = 1;
            break;
        case "#ALL":
            op = 2;
            break;
        case "#1":
            op = 3;
            break;
    }

    const gen = () => {
        if (!loaded) {
            status.innerHTML = "Wait for data to be loaded, try again later.";
            return;
        }
        status.innerHTML =
            'Getting random point... <i class="fas fa-spinner fa-spin"></i>';
        var random = Math.floor(Math.random() * data.stopGroups.length);
        var place = data.stopGroups[random];
        status.innerHTML = "";
        let lines = [];
        let types = [];
        let ics = [];
        for (let i = 0; i < place.stops.length; i++) {
            const stop = place.stops[i];
            for (let l = 0; l < stop.lines.length; l++) {
                const line = stop.lines[l];
                if (!lines.includes(line.name)) lines.push(line.name);
                if (!types.includes(line.type)) {
                    types.push(line.type);
                    if (Object.keys(icons).includes(line.type)) {
                        ics.push(
                            `<i class="fa-solid ${icons[line.type]}" title="${line.type}"></i>`,
                        );
                    } else
                        ics.push(
                            `<i class="fa-solid ${icons["default"]}" title="${line.type}"></i>`,
                        );
                }
            }
        }

        const html = `${ics.join(" ")} ${place.name}`;

        places.innerHTML += `<li class="place">${html} <input type="button" value="Zobrazit linky" onclick="this.replaceWith(' - ${lines.join(", ")}')"/></li>`;
        addMarker([place.avgLat, place.avgLon], html);
    };

    const loadData = () => {
        const xhr = new XMLHttpRequest();
        status.innerHTML =
            'Downloading data from the internet... <i class="fas fa-spinner fa-spin"></i>';
        xhr.open("GET", openData, true);
        xhr.setRequestHeader("Access-Control-Allow-Headers", "*");
        xhr.onload = () => {
            if (xhr.status === 200) {
                data = JSON.parse(xhr.responseText);
                loaded = true;
                status.innerHTML =
                    "All data downloaded. Filtering... <i class='fas fa-spinner fa-spin'></i>";

                const initialSize = data.stopGroups.length;

                // filter the data.features array
                data.stopGroups = data.stopGroups.filter((place) =>
                    condition(place),
                );

                console.log(
                    `Filtered out ${initialSize - data.stopGroups.length} places. From ${initialSize}, to ${data.stopGroups.length}.`,
                );

                status.innerHTML = "All done!";

                setTimeout(() => {
                    status.innerHTML = "";
                }, 1000);
            } else {
                status.innerHTML =
                    "Error: " + xhr.statusText + " (" + xhr.status + ")";
            }
        };

        xhr.onerror = (err) => {
            status.innerHTML = "Error with parsing data!";
        };
        xhr.send();
    };

    function condition(place) {
        switch (op) {
            case 0:
                return place.municipality === "Praha";
            case 1:
                return ["P", "0", "B"].some((v) => place.zone.includes(v));
            case 2:
                return true;
            case 3:
                return place.zone == "1";
        }
    }

    let map;
    function loadMap() {
        map = L.map("map").setView([50.073658, 14.418540], 12);

        const mczk = "WQTIpJfOFhDeUd3XDWqdghK2iVs4fokuUYQQqqSFhQs";

        /*
Then we add a raster tile layer with Mapy NG tiles
See https://leafletjs.com/reference.html#tilelayer
*/
        L.tileLayer(
            `https://api.mapy.cz/v1/maptiles/basic/256/{z}/{x}/{y}?apikey=${mczk}`,
            {
                minZoom: 0,
                maxZoom: 14,
                attribution:
                    '<a href="https://api.mapy.cz/copyright" target="_blank">&copy; Seznam.cz a.s. a další</a>',
            },
        ).addTo(map);

        /*
We also require you to include our logo somewhere over the map.
We create our own map control implementing a documented interface,
that shows a clickable logo.
See https://leafletjs.com/reference.html#control
*/
        const LogoControl = L.Control.extend({
            options: {
                position: "bottomleft",
            },

            onAdd: function (map) {
                const container = L.DomUtil.create("div");
                const link = L.DomUtil.create("a", "", container);

                link.setAttribute("href", "http://mapy.cz/");
                link.setAttribute("target", "_blank");
                link.innerHTML =
                    '<img src="https://api.mapy.cz/img/api/logo.svg" />';
                L.DomEvent.disableClickPropagation(link);

                return container;
            },
        });

        // finally we add our LogoControl to the map
        new LogoControl().addTo(map);
    }

    loadData();
    loadMap();

    function addMarker(coords, html) {
        const marker = L.marker(coords).addTo(map);
        marker.bindPopup(html).openPopup();
    }

    setTimeout(() => {
        document.getElementById("disclaimer").style.display = "none";
    }, 5000);

    function shareIt() {
	    let text = "*MHD HRA*\nhttps://panjohnny.me/demo/prague/\n\nVylosovaná místa:\n";
	    document.querySelector("#places").querySelectorAll("li").forEach(n => {
	    	text += "- " + n.innerText.replaceAll("\n", "") + "\n";
	    })

	    text += "\nVygenerováno automaticky";
	
	    if (!navigator.share) {
		    const dialog = document.createElement("dialog");
		    dialog.innerText = text;
		    document.body.appendChild(dialog);
    		dialog.showModal();
    	} else {
    		navigator.share({
			title: "MHD Hra",
			text: text,
			url: "https://panjohnny.me/demo/prague"
		});
    	}
    }
</script>
<style>
    body {
        overflow-x: hidden;
    }

    #map {
        height: 80vh;
    }

    #gen {
        width: 100%;
        background-color: orangered;
        color: white;
        padding: 1em;
        outline: none !important;
        font-size: larger;
        border-radius: 7px;
        border-color: black;
        font-size: 1.2em;
    }

    #status {
        font-size: 2em;
    }

    #places {
        margin-top: 1em;
        border-top: 1px var(--onyx) solid;
        border-bottom: 1px var(--onyx) solid;
        padding-top: 0.3em;
        padding-bottom: 0.3em;
        width: 100%;
        display: block;
        font-size: 1.3em;
    }

    .place::after {
        content: "; ";
    }

    #disclaimer {
        position: absolute;
        right: 1em;
        bottom: 1em;
        padding: 0.5em;
        border-radius: 7px;
        font-size: medium;
        font-weight: bold;
        width: 18em;
        /* make it on top of everything */
        z-index: 100;
    }

    :global(footer) {
        position: absolute;
        bottom: 0px;
    }

    .share {
    	padding: 3px; 
    	border: 1px solid; 
    	margin: 10px;
    	display: block;
    	text-align: center;
    	border-radius: 12px;
    	text-decoration: none;
    }
</style>
