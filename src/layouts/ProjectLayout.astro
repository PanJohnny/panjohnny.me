---
import HeadingLinker from '../components/HeadingLinker.astro';
import SharedCSS from '../components/SharedCSS.astro';
interface Props {
    title: string;
    description: string;
    slug: string;
    tags: string[];
    links: any;
}

var props = Astro.props as Props;

const toHex = (s: string) => {
    var hash = 0;
    if (s.length === 0) return "#FFFFFF";
    for (var i = 0; i < s.length; i++) {
        hash = s.charCodeAt(i) + ((hash << 5) - hash);
        hash = hash & hash;
    }
    var color = "#";
    for (var i = 0; i < 3; i++) {
        var value = (hash >> (i * 8)) & 255;
        color += ("00" + value.toString(16)).substr(-2);
    }
    return color;
};

function fontColor(hex: string) {
    if (hex.indexOf("#") === 0) {
        hex = hex.slice(1);
    }
    // convert 3-digit hex to 6-digits.
    if (hex.length === 3) {
        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
    }
    if (hex.length !== 6) {
        return "#FFFFFF";
    }
    var r: number = parseInt(hex.slice(0, 2), 16),
        g: number = parseInt(hex.slice(2, 4), 16),
        b: number = parseInt(hex.slice(4, 6), 16);
    return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? "#000000" : "#FFFFFF";
}
const newShade = (hexColor, magnitude) => {
    hexColor = hexColor.replace(`#`, ``);
    if (hexColor.length === 6) {
        const decimalColor = parseInt(hexColor, 16);
        let r = (decimalColor >> 16) + magnitude;
        r > 255 && (r = 255);
        r < 0 && (r = 0);
        let g = (decimalColor & 0x0000ff) + magnitude;
        g > 255 && (g = 255);
        g < 0 && (g = 0);
        let b = ((decimalColor >> 8) & 0x00ff) + magnitude;
        b > 255 && (b = 255);
        b < 0 && (b = 0);
        return `#${(g | (b << 8) | (r << 16)).toString(16)}`;
    } else {
        return hexColor;
    }
};
---

<html>
<head>
    <title>{props.title}</title>
    <meta charset="UTF-8"/>
    <meta name="description" content={props.description}/>
    <meta name="viewport" content="width=device-width"/>
    <link rel="icon" type="image/x-icon" href="/favicon.ico"/>
    <meta name="generator" content={Astro.generator}/>
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website"/>
    <meta
            property="og:url"
            content={"https://panjohnny.me/projects/" + props.slug}
    />
    <meta property="og:title" content={props.title}/>
    <meta property="og:description" content={props.description}/>
    <meta property="og:image" content="/favicon.ico"/>

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image"/>
    <meta
            property="twitter:url"
            content={"https://panjohnny.me/projects/" + props.slug}
    />
    <meta property="twitter:title" content={props.title}/>
    <meta property="twitter:description" content={props.description}/>
    <meta property="twitter:image" content="/favicon.ico"/>


    <SharedCSS/>
</head>

<body>
<header>
    <a href="/">Home</a>
    <a href="/projects" role="button" class="secondary">Other projects</a>
</header>
<main>
    <div class="container">
        <slot/>
    </div>
    <div class="info-table">
        <h2>Project info</h2>
        <h3>Tags</h3>
        <div class="project-tags">
            {
                props.tags.map((t) => (
                        <a
                                data-tag={t}
                                href={"/projects/tag/" + t}
                                style={
                                    "background-color: " +
                                    toHex(t) +
                                    "; color: " +
                                    fontColor(toHex(t)) +
                                    "; border-color: " +
                                    newShade(toHex(t), 80) +
                                    ";"
                                }
                        >
                            {t}
                        </a>
                ))
            }
        </div>
        <h3>Links</h3>
        <div class="project-links">
            {
                props.links.map((l) => (
                        <a
                                href={l.url}
                                data-link={l.title}
                                style={
                                    "background-color: " +
                                    toHex(l.title) +
                                    "; color: " +
                                    fontColor(toHex(l.title)) +
                                    "; border-color: " +
                                    newShade(toHex(l.title), 80) +
                                    ";"
                                }
                        >
                            <i class={l.icon}/> {l.title}
                        </a>
                ))
            }
        </div>
    </div>
</main>

<footer class="center-text">
    <span class="nowrap">Created with â™¥ by PanJohnny</span> | <span
        class="nowrap"
>Icons from <i class="fa-solid fa-font-awesome"></i> Font Awesome</span
>
</footer>
<script
        src="https://kit.fontawesome.com/748c4b57ac.js"
        crossorigin="anonymous"></script>
<HeadingLinker  levels={["h2"]}/>
</body>

</html>

<style>
    :global(.nowrap) {
        white-space: nowrap;
    }

    :global(.center-text) {
        text-align: center;
    }

    .project-tags {
        display: inline;
        line-height: 2em;
    }

    .project-tags > a:not(:last-child) {
        margin-right: 0.2em;
    }

    .project-tags > a {
        padding: 2px;
        border: 1px solid;
        border-radius: 3px;
        border-color: white;
        text-decoration: none;
    }

    .project-links {
        display: flex;
        flex-direction: column;
    }

    .project-links > a {
        padding: 2px;
        border: 1px solid;
        border-radius: 3px;
        border-color: white;
        text-decoration: none;
    }

    .project-links > a:not(:last-child) {
        margin-bottom: 0.5em;
    }

    [data-link="GitHub"] {
        background-color: #333 !important;
        color: #f5f5f5 !important;
        border-color: #252525 !important;
    }

    .info-table > h3:first-child {
        margin-top: 0px;
    }

    .info-table {
        margin-top: 1em;
        margin-bottom: 1em;
        border: 1px solid;
        border-radius: 15px;
        padding: 1em;
        margin-bottom: 3em;
    }

    .container {
        padding: 3em;
    }
</style>

<style>
    @import url(https://fonts.bunny.net/css?family=actor:400);

    :root {
        --raisin-black: #1e1e24;
        --floral-white: #fff8f0;
        --sunset: #ffcf99;
    }

    html {
        font-family: "Actor", sans-serif;
        background-color: var(--floral-white);
        color: var(--raisin-black);
        text-decoration-color: var(--sunset);
    }

    .light {
        background-color: var(--floral-white);
        color: var(--raisin-black);
        border-color: var(--raisin-black);
    }

    .dark {
        background-color: var(--raisin-black);
        color: var(--floral-white);
        border-color: var(--floral-white);
    }

    :global(.no-margin) {
        margin: 0px;
    }

    :global(.reset) {
        color: inherit;
        text-decoration: inherit;
    }

    header > h1 {
        text-align: center;
    }

    [role="button"] {
        cursor: pointer;
    }

    .rectangleRender {
        cursor: pointer;
        display: inline-block;
        padding: 1em;
        border-radius: 10px;
        border-color: var(--sunset);
        border-style: solid;
        width: 0px;
        height: 0px;
        outline: none;
    }

    dialog {
        background-color: var(--floral-white);
        color: var(--raisin-black);
        border-radius: 15px;
    }

    .bar {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }

    .links {
        font-size: 2em;
    }

    :global(a) {
        color: inherit;
        text-decoration: var(--sunset) underline 2px;
    }
</style>

<script>
    const schemes = ["dark", "light"];
    const html = document.querySelector("html");
    const schemeToggle = document.querySelector("#scheme");
    const colorPicker: HTMLDialogElement | null =
        document.querySelector("#colorPicker");
    window.addEventListener("load", loadMode);
    schemeToggle?.addEventListener("click", schemePallet);

    function loadMode() {
        // Check localStorage and update data respectively
        const scheme = localStorage.getItem("color-scheme");
        if (scheme) {
            html?.classList.add(scheme);

            colorPicker?.querySelectorAll("input[type=button]").forEach((e) => {
                e.addEventListener("click", () => {
                    localStorage.setItem(
                        "color-scheme",
                        e.getAttribute("data-scheme") + ""
                    );

                    // If schemes already present delete them
                    schemes.forEach((s) => {
                        if (html?.classList.contains(s))
                            html.classList.remove(s);
                    });

                    // Close modal
                    colorPicker.close();

                    // Load mode
                    loadMode();
                });
            });
        } else {
            if (
                window.matchMedia &&
                window.matchMedia("(prefers-color-scheme: dark)").matches
            ) {
                localStorage.setItem("color-scheme", "dark");
            } else {
                localStorage.setItem("color-scheme", "light");
            }
            loadMode();
            return;
        }
    }

    function schemePallet() {
        if (colorPicker) colorPicker.showModal();
    }
</script>
