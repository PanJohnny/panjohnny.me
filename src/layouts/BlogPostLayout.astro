---
import HeadingLinker from '../components/HeadingLinker.astro';
import SharedCSS from '../components/SharedCSS.astro';
interface Props {
    title: string;
    description: string;
    slug: string;
    date: string;
    tags: string[];
}

var props = Astro.props as Props;
---

<html>
    <head>
        <title>{props.title}</title>
        <meta charset="UTF-8" />
        <meta name="description" content={props.description} />
        <meta name="viewport" content="width=device-width" />
        <link rel="icon" type="image/x-icon" href="/favicon.ico" />
        <meta name="generator" content={Astro.generator} />
        <!-- Open Graph / Facebook -->
        <meta property="og:type" content="website" />
        <meta
            property="og:url"
            content={"https://panjohnny.me/blog/" + props.slug}
        />
        <meta property="og:title" content={props.title} />
        <meta property="og:description" content={props.description} />
        <meta property="og:image" content="/favicon.ico" />

        <!-- Twitter -->
        <meta property="twitter:card" content="summary_large_image" />
        <meta
            property="twitter:url"
            content={"https://panjohnny.me/blog/" + props.slug}
        />
        <meta property="twitter:title" content={props.title} />
        <meta property="twitter:description" content={props.description} />
        <meta property="twitter:image" content="/favicon.ico" />

        <SharedCSS />
    </head>

    <body class="container">
        <header>
            <a href="/">Home</a>
            <a href="/blog" role="button" class="secondary">Other blogs</a>
            <a href="latest" role="button" class="secondary">Latest blog</a>
        </header>
        <main>
            <slot />
            <hr>
            <h2>Tags</h2>
            <ul>
                {props.tags.map(t => (<li>{t}</li>))}
            </ul>
        </main>

        <footer>
            <div class="center-text">
                <span class="nowrap">Created with â™¥ by PanJohnny</span> | <span
                    class="nowrap"
                    >Icons from <i class="fa-solid fa-font-awesome"></i> Font Awesome</span
                >
            </div>
        </footer>

        <script is:inline>
            const post = document.getElementById("post");
            post.addEventListener("click", (event) => {
                const before = post.innerText;
                copyToClipboard(window.location.href);
                post.innerText = "URL Copied to clipboard!";
                post.style.animation = "fade-out 2s linear";
                setTimeout(() => {
                    post.innerText = before;
                }, 2000);
            });

            function copyToClipboard(textToCopy) {
                navigator.clipboard.writeText(textToCopy);
            }
        </script>
        <script
                src="https://kit.fontawesome.com/748c4b57ac.js"
                crossorigin="anonymous"></script>
    </body>
</html>
<HeadingLinker  levels={["h1", "h2", "h3"]}/>
<style>
    :global(.nowrap) {
        white-space: nowrap;
    }

    :global(.center-text) {
        text-align: center;
    }

    @keyframes fade-out {
        from {
            opacity: 1;
        }
        to {
            opacity: 0;
        }
    }

    footer > .top-footer {
        display: flex;
        justify-content: space-between;
    }

    #post {
        cursor: copy;
    }

    .info {
        display: flex;
        justify-content: space-between;
    }
</style>

<style>
    @import url(https://fonts.bunny.net/css?family=actor:400);

    :root {
        --raisin-black: #1e1e24;
        --floral-white: #fff8f0;
        --sunset: #ffcf99;
    }

    html {
        font-family: "Actor", sans-serif;
        background-color: var(--floral-white);
        color: var(--raisin-black);
        text-decoration-color: var(--sunset);
    }

    .light {
        background-color: var(--floral-white);
        color: var(--raisin-black);
        border-color: var(--raisin-black);
    }

    .dark {
        background-color: var(--raisin-black);
        color: var(--floral-white);
        border-color: var(--floral-white);
    }

    :global(.no-margin) {
        margin: 0px;
    }

    :global(.reset) {
        color: inherit;
        text-decoration: inherit;
    }

    header > h1 {
        text-align: center;
    }

    [role="button"] {
        cursor: pointer;
    }

    .rectangleRender {
        cursor: pointer;
        display: inline-block;
        padding: 1em;
        border-radius: 10px;
        border-color: var(--sunset);
        border-style: solid;
        width: 0px;
        height: 0px;
        outline: none;
    }

    dialog {
        background-color: var(--floral-white);
        color: var(--raisin-black);
        border-radius: 15px;
    }

    .bar {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }

    .links {
        font-size: 2em;
    }

    :global(a) {
        color: inherit;
        text-decoration: var(--sunset) underline 2px;
    }
</style>

<script>
    const schemes = ["dark", "light"];
    const html = document.querySelector("html");
    const schemeToggle = document.querySelector("#scheme");
    const colorPicker: HTMLDialogElement | null =
        document.querySelector("#colorPicker");
    window.addEventListener("load", loadMode);
    schemeToggle?.addEventListener("click", schemePallet);

    function loadMode() {
        // Check localStorage and update data respectively
        const scheme = localStorage.getItem("color-scheme");
        if (scheme) {
            html?.classList.add(scheme);

            colorPicker?.querySelectorAll("input[type=button]").forEach((e) => {
                e.addEventListener("click", () => {
                    localStorage.setItem(
                        "color-scheme",
                        e.getAttribute("data-scheme") + ""
                    );

                    // If schemes already present delete them
                    schemes.forEach((s) => {
                        if (html?.classList.contains(s))
                            html.classList.remove(s);
                    });

                    // Close modal
                    colorPicker.close();

                    // Load mode
                    loadMode();
                });
            });
        } else {
            if (
                window.matchMedia &&
                window.matchMedia("(prefers-color-scheme: dark)").matches
            ) {
                localStorage.setItem("color-scheme", "dark");
            } else {
                localStorage.setItem("color-scheme", "light");
            }
            loadMode();
            return;
        }
    }

    function schemePallet() {
        if (colorPicker) colorPicker.showModal();
    }
</script>
