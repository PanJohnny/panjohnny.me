---
interface Props {
    title: string;
    description: string;
    id: string;
    tags: string[];
    image?: string;
}

const props = Astro.props as Props;
const toHex = (s: string) => {
    var hash = 0;
    if (s.length === 0) return "#FFFFFF";
    for (var i = 0; i < s.length; i++) {
        hash = s.charCodeAt(i) + ((hash << 5) - hash);
        hash = hash & hash;
    }
    var color = "#";
    for (var i = 0; i < 3; i++) {
        var value = (hash >> (i * 8)) & 255;
        color += ("00" + value.toString(16)).substr(-2);
    }
    return color;
};

function fontColor(hex: string) {
    if (hex.indexOf("#") === 0) {
        hex = hex.slice(1);
    }
    // convert 3-digit hex to 6-digits.
    if (hex.length === 3) {
        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
    }
    if (hex.length !== 6) {
        return "#FFFFFF";
    }
    var r: number = parseInt(hex.slice(0, 2), 16),
        g: number = parseInt(hex.slice(2, 4), 16),
        b: number = parseInt(hex.slice(4, 6), 16);
    return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? "#000000" : "#FFFFFF";
}
const newShade = (hexColor, magnitude) => {
    hexColor = hexColor.replace(`#`, ``);
    if (hexColor.length === 6) {
        const decimalColor = parseInt(hexColor, 16);
        let r = (decimalColor >> 16) + magnitude;
        r > 255 && (r = 255);
        r < 0 && (r = 0);
        let g = (decimalColor & 0x0000ff) + magnitude;
        g > 255 && (g = 255);
        g < 0 && (g = 0);
        let b = ((decimalColor >> 8) & 0x00ff) + magnitude;
        b > 255 && (b = 255);
        b < 0 && (b = 0);
        return `#${(g | (b << 8) | (r << 16)).toString(16)}`;
    } else {
        return hexColor;
    }
};
---

<div class="project">
    <div class="project-upper">
        <a href={"/projects/" + props.id}>
            <span class="project-title">{props.title}</span>
        </a>
        <div class="project-tags">
            {
                props.tags.map((t) => (
                    <a
                        data-tag={t}
                        href={"/projects/tag/" + t}
                        style={
                            "background-color: " +
                            toHex(t) +
                            "; color: " +
                            fontColor(toHex(t)) +
                            "; border-color: " +
                            newShade(toHex(t), 80) +
                            ";"
                        }
                    >
                        {t}
                    </a>
                ))
            }
        </div>
    </div>
    <div class="project-description">
        {props.description}
    </div>
</div>

<style>
    a {
        text-decoration: none;
        color: inherit;
    }

    .project {
        display: flex;
        flex-direction: column;
        border: #ff6c55 solid;
        padding: 1em;
        border-radius: 12px;
    }

    .project-upper {
        display: flex;
        justify-content: space-between;
        padding-bottom: 1em;
        margin-bottom: 1em;
        border-bottom: 1px solid;
    }

    .project-title {
        font-size: 1.3em;
        font-weight: 400;
    }

    .project-description {
        font-size: 0.8em;
    }

    .project-tags {
        line-height: 30px;
    }

    .project-tags > *:not(:last-child) {
        margin-right: 0.2em;
    }

    .project-tags > * {
        padding: 4px;
        border-radius: 12px;
        border: 1px solid white;
        display: inline-block;
        float: right;
    }
</style>
